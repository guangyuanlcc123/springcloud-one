<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.6.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.xiaostudy</groupId>
    <artifactId>common</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>common</name>
    <packaging>pom</packaging>

    <properties>
        <java.version>1.8</java.version>
        <spring-cloud.version>Hoxton.SR3</spring-cloud.version>

        <eureka.user.name>admin</eureka.user.name>
        <eureka.user.password>admin</eureka.user.password>
        <springCloudTest.version>0.0.1-SNAPSHOT</springCloudTest.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-config-client</artifactId>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <classifier>execute</classifier>
                </configuration>
                <!-- jar包使用 -->
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
                <!-- jar包使用 -->
            </plugin>

            <!--使用docker-maven-plugin插件-->
<!--            <plugin>-->
<!--                <groupId>com.spotify</groupId>-->
<!--                <artifactId>docker-maven-plugin</artifactId>-->
<!--                <version>1.2.2</version>-->
<!--                &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>build-image</id>-->
<!--                        &lt;!&ndash;将插件绑定在package这个phase上。也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build&ndash;&gt;-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>build</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->

<!--                <configuration>-->
<!--                    &lt;!&ndash;指定生成的镜像名,前面的那个名字你随便改,后面的引用,不能动&ndash;&gt;-->
<!--                    <imageName>sptingcloud/${project.artifactId}</imageName>-->
<!--                    &lt;!&ndash;指定标签,也就是版本号,可以自定义&ndash;&gt;-->
<!--                    <imageTags>-->
<!--                        <imageTag>0.1</imageTag>-->
<!--                    </imageTags>-->
<!--                    &lt;!&ndash; 指定 Dockerfile 路径&ndash;&gt;-->
<!--                    <dockerDirectory>${project.basedir}</dockerDirectory>-->

<!--                    &lt;!&ndash;指定远程 docker api地址 也就是服务器ip+docker的端口号&ndash;&gt;-->
<!--                    <dockerHost>http://192.168.163.129:2375</dockerHost>-->

<!--                    &lt;!&ndash; 这里是复制 jar 包到 docker 容器指定目录配置 &ndash;&gt;-->
<!--                    <resources>-->
<!--                        <resource>-->
<!--                            <targetPath>/</targetPath>-->
<!--                            &lt;!&ndash;jar 包所在的路径  此处配置的 即对应 target 目录&ndash;&gt;-->
<!--                            <directory>${project.build.directory}</directory>-->
<!--                            &lt;!&ndash; 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　&ndash;&gt;-->
<!--                            <include>${project.build.finalName}-execute.jar</include>-->
<!--                        </resource>-->
<!--                    </resources>-->
<!--                </configuration>-->
<!--            </plugin>-->
            <!--使用docker-maven-plugin插件-->
        </plugins>
        <resources>
            <resource>
                <!--指定resources插件处理哪个目录下的资源文件-->
                <directory>src/main/resources</directory>
                <!--打开资源过滤功能-->
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>

</project>